// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoComplexTestClass.proto

#ifndef PROTOBUF_ProtoComplexTestClass_2eproto__INCLUDED
#define PROTOBUF_ProtoComplexTestClass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ProtoComplexTestClass_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComplexTestClassImpl();
void InitDefaultsComplexTestClass();
inline void InitDefaults() {
  InitDefaultsComplexTestClass();
}
}  // namespace protobuf_ProtoComplexTestClass_2eproto
namespace tutorial {
class ComplexTestClass;
class ComplexTestClassDefaultTypeInternal;
extern ComplexTestClassDefaultTypeInternal _ComplexTestClass_default_instance_;
}  // namespace tutorial
namespace tutorial {

// ===================================================================

class ComplexTestClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.ComplexTestClass) */ {
 public:
  ComplexTestClass();
  virtual ~ComplexTestClass();

  ComplexTestClass(const ComplexTestClass& from);

  inline ComplexTestClass& operator=(const ComplexTestClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComplexTestClass(ComplexTestClass&& from) noexcept
    : ComplexTestClass() {
    *this = ::std::move(from);
  }

  inline ComplexTestClass& operator=(ComplexTestClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexTestClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplexTestClass* internal_default_instance() {
    return reinterpret_cast<const ComplexTestClass*>(
               &_ComplexTestClass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ComplexTestClass* other);
  friend void swap(ComplexTestClass& a, ComplexTestClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComplexTestClass* New() const PROTOBUF_FINAL { return New(NULL); }

  ComplexTestClass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ComplexTestClass& from);
  void MergeFrom(const ComplexTestClass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ComplexTestClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double attr10 = 10;
  int attr10_size() const;
  void clear_attr10();
  static const int kAttr10FieldNumber = 10;
  double attr10(int index) const;
  void set_attr10(int index, double value);
  void add_attr10(double value);
  const ::google::protobuf::RepeatedField< double >&
      attr10() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_attr10();

  // repeated string attr11 = 11;
  int attr11_size() const;
  void clear_attr11();
  static const int kAttr11FieldNumber = 11;
  const ::std::string& attr11(int index) const;
  ::std::string* mutable_attr11(int index);
  void set_attr11(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_attr11(int index, ::std::string&& value);
  #endif
  void set_attr11(int index, const char* value);
  void set_attr11(int index, const char* value, size_t size);
  ::std::string* add_attr11();
  void add_attr11(const ::std::string& value);
  #if LANG_CXX11
  void add_attr11(::std::string&& value);
  #endif
  void add_attr11(const char* value);
  void add_attr11(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& attr11() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attr11();

  // repeated .tutorial.ComplexTestClass attr13 = 13;
  int attr13_size() const;
  void clear_attr13();
  static const int kAttr13FieldNumber = 13;
  const ::tutorial::ComplexTestClass& attr13(int index) const;
  ::tutorial::ComplexTestClass* mutable_attr13(int index);
  ::tutorial::ComplexTestClass* add_attr13();
  ::google::protobuf::RepeatedPtrField< ::tutorial::ComplexTestClass >*
      mutable_attr13();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::ComplexTestClass >&
      attr13() const;

  // bytes attr1 = 1;
  void clear_attr1();
  static const int kAttr1FieldNumber = 1;
  const ::std::string& attr1() const;
  void set_attr1(const ::std::string& value);
  #if LANG_CXX11
  void set_attr1(::std::string&& value);
  #endif
  void set_attr1(const char* value);
  void set_attr1(const void* value, size_t size);
  ::std::string* mutable_attr1();
  ::std::string* release_attr1();
  void set_allocated_attr1(::std::string* attr1);

  // string attr8 = 8;
  void clear_attr8();
  static const int kAttr8FieldNumber = 8;
  const ::std::string& attr8() const;
  void set_attr8(const ::std::string& value);
  #if LANG_CXX11
  void set_attr8(::std::string&& value);
  #endif
  void set_attr8(const char* value);
  void set_attr8(const char* value, size_t size);
  ::std::string* mutable_attr8();
  ::std::string* release_attr8();
  void set_allocated_attr8(::std::string* attr8);

  // string attr9 = 9;
  void clear_attr9();
  static const int kAttr9FieldNumber = 9;
  const ::std::string& attr9() const;
  void set_attr9(const ::std::string& value);
  #if LANG_CXX11
  void set_attr9(::std::string&& value);
  #endif
  void set_attr9(const char* value);
  void set_attr9(const char* value, size_t size);
  ::std::string* mutable_attr9();
  ::std::string* release_attr9();
  void set_allocated_attr9(::std::string* attr9);

  // .tutorial.ComplexTestClass attr12 = 12;
  bool has_attr12() const;
  void clear_attr12();
  static const int kAttr12FieldNumber = 12;
  const ::tutorial::ComplexTestClass& attr12() const;
  ::tutorial::ComplexTestClass* release_attr12();
  ::tutorial::ComplexTestClass* mutable_attr12();
  void set_allocated_attr12(::tutorial::ComplexTestClass* attr12);

  // int32 attr2 = 2;
  void clear_attr2();
  static const int kAttr2FieldNumber = 2;
  ::google::protobuf::int32 attr2() const;
  void set_attr2(::google::protobuf::int32 value);

  // int32 attr3 = 3;
  void clear_attr3();
  static const int kAttr3FieldNumber = 3;
  ::google::protobuf::int32 attr3() const;
  void set_attr3(::google::protobuf::int32 value);

  // int64 attr4 = 4;
  void clear_attr4();
  static const int kAttr4FieldNumber = 4;
  ::google::protobuf::int64 attr4() const;
  void set_attr4(::google::protobuf::int64 value);

  // double attr6 = 6;
  void clear_attr6();
  static const int kAttr6FieldNumber = 6;
  double attr6() const;
  void set_attr6(double value);

  // float attr5 = 5;
  void clear_attr5();
  static const int kAttr5FieldNumber = 5;
  float attr5() const;
  void set_attr5(float value);

  // bool attr7 = 7;
  void clear_attr7();
  static const int kAttr7FieldNumber = 7;
  bool attr7() const;
  void set_attr7(bool value);

  // @@protoc_insertion_point(class_scope:tutorial.ComplexTestClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > attr10_;
  mutable int _attr10_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> attr11_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::ComplexTestClass > attr13_;
  ::google::protobuf::internal::ArenaStringPtr attr1_;
  ::google::protobuf::internal::ArenaStringPtr attr8_;
  ::google::protobuf::internal::ArenaStringPtr attr9_;
  ::tutorial::ComplexTestClass* attr12_;
  ::google::protobuf::int32 attr2_;
  ::google::protobuf::int32 attr3_;
  ::google::protobuf::int64 attr4_;
  double attr6_;
  float attr5_;
  bool attr7_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoComplexTestClass_2eproto::TableStruct;
  friend void ::protobuf_ProtoComplexTestClass_2eproto::InitDefaultsComplexTestClassImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComplexTestClass

// bytes attr1 = 1;
inline void ComplexTestClass::clear_attr1() {
  attr1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComplexTestClass::attr1() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr1)
  return attr1_.GetNoArena();
}
inline void ComplexTestClass::set_attr1(const ::std::string& value) {
  
  attr1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr1)
}
#if LANG_CXX11
inline void ComplexTestClass::set_attr1(::std::string&& value) {
  
  attr1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.ComplexTestClass.attr1)
}
#endif
inline void ComplexTestClass::set_attr1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attr1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ComplexTestClass.attr1)
}
inline void ComplexTestClass::set_attr1(const void* value, size_t size) {
  
  attr1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ComplexTestClass.attr1)
}
inline ::std::string* ComplexTestClass::mutable_attr1() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr1)
  return attr1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComplexTestClass::release_attr1() {
  // @@protoc_insertion_point(field_release:tutorial.ComplexTestClass.attr1)
  
  return attr1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComplexTestClass::set_allocated_attr1(::std::string* attr1) {
  if (attr1 != NULL) {
    
  } else {
    
  }
  attr1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr1);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ComplexTestClass.attr1)
}

// int32 attr2 = 2;
inline void ComplexTestClass::clear_attr2() {
  attr2_ = 0;
}
inline ::google::protobuf::int32 ComplexTestClass::attr2() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr2)
  return attr2_;
}
inline void ComplexTestClass::set_attr2(::google::protobuf::int32 value) {
  
  attr2_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr2)
}

// int32 attr3 = 3;
inline void ComplexTestClass::clear_attr3() {
  attr3_ = 0;
}
inline ::google::protobuf::int32 ComplexTestClass::attr3() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr3)
  return attr3_;
}
inline void ComplexTestClass::set_attr3(::google::protobuf::int32 value) {
  
  attr3_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr3)
}

// int64 attr4 = 4;
inline void ComplexTestClass::clear_attr4() {
  attr4_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ComplexTestClass::attr4() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr4)
  return attr4_;
}
inline void ComplexTestClass::set_attr4(::google::protobuf::int64 value) {
  
  attr4_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr4)
}

// float attr5 = 5;
inline void ComplexTestClass::clear_attr5() {
  attr5_ = 0;
}
inline float ComplexTestClass::attr5() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr5)
  return attr5_;
}
inline void ComplexTestClass::set_attr5(float value) {
  
  attr5_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr5)
}

// double attr6 = 6;
inline void ComplexTestClass::clear_attr6() {
  attr6_ = 0;
}
inline double ComplexTestClass::attr6() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr6)
  return attr6_;
}
inline void ComplexTestClass::set_attr6(double value) {
  
  attr6_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr6)
}

// bool attr7 = 7;
inline void ComplexTestClass::clear_attr7() {
  attr7_ = false;
}
inline bool ComplexTestClass::attr7() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr7)
  return attr7_;
}
inline void ComplexTestClass::set_attr7(bool value) {
  
  attr7_ = value;
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr7)
}

// string attr8 = 8;
inline void ComplexTestClass::clear_attr8() {
  attr8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComplexTestClass::attr8() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr8)
  return attr8_.GetNoArena();
}
inline void ComplexTestClass::set_attr8(const ::std::string& value) {
  
  attr8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr8)
}
#if LANG_CXX11
inline void ComplexTestClass::set_attr8(::std::string&& value) {
  
  attr8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.ComplexTestClass.attr8)
}
#endif
inline void ComplexTestClass::set_attr8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attr8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ComplexTestClass.attr8)
}
inline void ComplexTestClass::set_attr8(const char* value, size_t size) {
  
  attr8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ComplexTestClass.attr8)
}
inline ::std::string* ComplexTestClass::mutable_attr8() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr8)
  return attr8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComplexTestClass::release_attr8() {
  // @@protoc_insertion_point(field_release:tutorial.ComplexTestClass.attr8)
  
  return attr8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComplexTestClass::set_allocated_attr8(::std::string* attr8) {
  if (attr8 != NULL) {
    
  } else {
    
  }
  attr8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr8);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ComplexTestClass.attr8)
}

// string attr9 = 9;
inline void ComplexTestClass::clear_attr9() {
  attr9_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ComplexTestClass::attr9() const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr9)
  return attr9_.GetNoArena();
}
inline void ComplexTestClass::set_attr9(const ::std::string& value) {
  
  attr9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr9)
}
#if LANG_CXX11
inline void ComplexTestClass::set_attr9(::std::string&& value) {
  
  attr9_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.ComplexTestClass.attr9)
}
#endif
inline void ComplexTestClass::set_attr9(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attr9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ComplexTestClass.attr9)
}
inline void ComplexTestClass::set_attr9(const char* value, size_t size) {
  
  attr9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ComplexTestClass.attr9)
}
inline ::std::string* ComplexTestClass::mutable_attr9() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr9)
  return attr9_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ComplexTestClass::release_attr9() {
  // @@protoc_insertion_point(field_release:tutorial.ComplexTestClass.attr9)
  
  return attr9_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ComplexTestClass::set_allocated_attr9(::std::string* attr9) {
  if (attr9 != NULL) {
    
  } else {
    
  }
  attr9_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attr9);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ComplexTestClass.attr9)
}

// repeated double attr10 = 10;
inline int ComplexTestClass::attr10_size() const {
  return attr10_.size();
}
inline void ComplexTestClass::clear_attr10() {
  attr10_.Clear();
}
inline double ComplexTestClass::attr10(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr10)
  return attr10_.Get(index);
}
inline void ComplexTestClass::set_attr10(int index, double value) {
  attr10_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr10)
}
inline void ComplexTestClass::add_attr10(double value) {
  attr10_.Add(value);
  // @@protoc_insertion_point(field_add:tutorial.ComplexTestClass.attr10)
}
inline const ::google::protobuf::RepeatedField< double >&
ComplexTestClass::attr10() const {
  // @@protoc_insertion_point(field_list:tutorial.ComplexTestClass.attr10)
  return attr10_;
}
inline ::google::protobuf::RepeatedField< double >*
ComplexTestClass::mutable_attr10() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.ComplexTestClass.attr10)
  return &attr10_;
}

// repeated string attr11 = 11;
inline int ComplexTestClass::attr11_size() const {
  return attr11_.size();
}
inline void ComplexTestClass::clear_attr11() {
  attr11_.Clear();
}
inline const ::std::string& ComplexTestClass::attr11(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr11)
  return attr11_.Get(index);
}
inline ::std::string* ComplexTestClass::mutable_attr11(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr11)
  return attr11_.Mutable(index);
}
inline void ComplexTestClass::set_attr11(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr11)
  attr11_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ComplexTestClass::set_attr11(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tutorial.ComplexTestClass.attr11)
  attr11_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ComplexTestClass::set_attr11(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attr11_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.ComplexTestClass.attr11)
}
inline void ComplexTestClass::set_attr11(int index, const char* value, size_t size) {
  attr11_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.ComplexTestClass.attr11)
}
inline ::std::string* ComplexTestClass::add_attr11() {
  // @@protoc_insertion_point(field_add_mutable:tutorial.ComplexTestClass.attr11)
  return attr11_.Add();
}
inline void ComplexTestClass::add_attr11(const ::std::string& value) {
  attr11_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.ComplexTestClass.attr11)
}
#if LANG_CXX11
inline void ComplexTestClass::add_attr11(::std::string&& value) {
  attr11_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.ComplexTestClass.attr11)
}
#endif
inline void ComplexTestClass::add_attr11(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attr11_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.ComplexTestClass.attr11)
}
inline void ComplexTestClass::add_attr11(const char* value, size_t size) {
  attr11_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.ComplexTestClass.attr11)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComplexTestClass::attr11() const {
  // @@protoc_insertion_point(field_list:tutorial.ComplexTestClass.attr11)
  return attr11_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComplexTestClass::mutable_attr11() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.ComplexTestClass.attr11)
  return &attr11_;
}

// .tutorial.ComplexTestClass attr12 = 12;
inline bool ComplexTestClass::has_attr12() const {
  return this != internal_default_instance() && attr12_ != NULL;
}
inline void ComplexTestClass::clear_attr12() {
  if (GetArenaNoVirtual() == NULL && attr12_ != NULL) {
    delete attr12_;
  }
  attr12_ = NULL;
}
inline const ::tutorial::ComplexTestClass& ComplexTestClass::attr12() const {
  const ::tutorial::ComplexTestClass* p = attr12_;
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr12)
  return p != NULL ? *p : *reinterpret_cast<const ::tutorial::ComplexTestClass*>(
      &::tutorial::_ComplexTestClass_default_instance_);
}
inline ::tutorial::ComplexTestClass* ComplexTestClass::release_attr12() {
  // @@protoc_insertion_point(field_release:tutorial.ComplexTestClass.attr12)
  
  ::tutorial::ComplexTestClass* temp = attr12_;
  attr12_ = NULL;
  return temp;
}
inline ::tutorial::ComplexTestClass* ComplexTestClass::mutable_attr12() {
  
  if (attr12_ == NULL) {
    attr12_ = new ::tutorial::ComplexTestClass;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr12)
  return attr12_;
}
inline void ComplexTestClass::set_allocated_attr12(::tutorial::ComplexTestClass* attr12) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete attr12_;
  }
  if (attr12) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      attr12 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, attr12, submessage_arena);
    }
    
  } else {
    
  }
  attr12_ = attr12;
  // @@protoc_insertion_point(field_set_allocated:tutorial.ComplexTestClass.attr12)
}

// repeated .tutorial.ComplexTestClass attr13 = 13;
inline int ComplexTestClass::attr13_size() const {
  return attr13_.size();
}
inline void ComplexTestClass::clear_attr13() {
  attr13_.Clear();
}
inline const ::tutorial::ComplexTestClass& ComplexTestClass::attr13(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.ComplexTestClass.attr13)
  return attr13_.Get(index);
}
inline ::tutorial::ComplexTestClass* ComplexTestClass::mutable_attr13(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.ComplexTestClass.attr13)
  return attr13_.Mutable(index);
}
inline ::tutorial::ComplexTestClass* ComplexTestClass::add_attr13() {
  // @@protoc_insertion_point(field_add:tutorial.ComplexTestClass.attr13)
  return attr13_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::ComplexTestClass >*
ComplexTestClass::mutable_attr13() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.ComplexTestClass.attr13)
  return &attr13_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::ComplexTestClass >&
ComplexTestClass::attr13() const {
  // @@protoc_insertion_point(field_list:tutorial.ComplexTestClass.attr13)
  return attr13_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoComplexTestClass_2eproto__INCLUDED
