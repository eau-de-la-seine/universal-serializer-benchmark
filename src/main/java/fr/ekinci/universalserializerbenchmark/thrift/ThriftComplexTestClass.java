/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fr.ekinci.universalserializerbenchmark.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Command like
 *      thrift -r -out generated --gen java /path/to/service.thrift
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-09")
public class ThriftComplexTestClass implements org.apache.thrift.TBase<ThriftComplexTestClass, ThriftComplexTestClass._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftComplexTestClass> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftComplexTestClass");

  private static final org.apache.thrift.protocol.TField ATTR1_FIELD_DESC = new org.apache.thrift.protocol.TField("attr1", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField ATTR2_FIELD_DESC = new org.apache.thrift.protocol.TField("attr2", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField ATTR3_FIELD_DESC = new org.apache.thrift.protocol.TField("attr3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ATTR4_FIELD_DESC = new org.apache.thrift.protocol.TField("attr4", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ATTR5_FIELD_DESC = new org.apache.thrift.protocol.TField("attr5", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ATTR6_FIELD_DESC = new org.apache.thrift.protocol.TField("attr6", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ATTR7_FIELD_DESC = new org.apache.thrift.protocol.TField("attr7", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ATTR8_FIELD_DESC = new org.apache.thrift.protocol.TField("attr8", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ATTR9_FIELD_DESC = new org.apache.thrift.protocol.TField("attr9", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ATTR10_FIELD_DESC = new org.apache.thrift.protocol.TField("attr10", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ATTR11_FIELD_DESC = new org.apache.thrift.protocol.TField("attr11", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField ATTR12_FIELD_DESC = new org.apache.thrift.protocol.TField("attr12", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField ATTR13_FIELD_DESC = new org.apache.thrift.protocol.TField("attr13", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftComplexTestClassStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftComplexTestClassTupleSchemeFactory();

  public byte attr1; // required
  public short attr2; // required
  public int attr3; // required
  public long attr4; // required
  public double attr5; // required
  public double attr6; // required
  public boolean attr7; // required
  public String attr8; // required
  public String attr9; // required
  public java.util.List<Double> attr10; // required
  public java.util.List<String> attr11; // required
  public ThriftComplexTestClass attr12; // required
  public java.util.List<ThriftComplexTestClass> attr13; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTR1((short)1, "attr1"),
    ATTR2((short)2, "attr2"),
    ATTR3((short)3, "attr3"),
    ATTR4((short)4, "attr4"),
    ATTR5((short)5, "attr5"),
    ATTR6((short)6, "attr6"),
    ATTR7((short)7, "attr7"),
    ATTR8((short)8, "attr8"),
    ATTR9((short)9, "attr9"),
    ATTR10((short)10, "attr10"),
    ATTR11((short)11, "attr11"),
    ATTR12((short)12, "attr12"),
    ATTR13((short)13, "attr13");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTR1
          return ATTR1;
        case 2: // ATTR2
          return ATTR2;
        case 3: // ATTR3
          return ATTR3;
        case 4: // ATTR4
          return ATTR4;
        case 5: // ATTR5
          return ATTR5;
        case 6: // ATTR6
          return ATTR6;
        case 7: // ATTR7
          return ATTR7;
        case 8: // ATTR8
          return ATTR8;
        case 9: // ATTR9
          return ATTR9;
        case 10: // ATTR10
          return ATTR10;
        case 11: // ATTR11
          return ATTR11;
        case 12: // ATTR12
          return ATTR12;
        case 13: // ATTR13
          return ATTR13;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ATTR1_ISSET_ID = 0;
  private static final int __ATTR2_ISSET_ID = 1;
  private static final int __ATTR3_ISSET_ID = 2;
  private static final int __ATTR4_ISSET_ID = 3;
  private static final int __ATTR5_ISSET_ID = 4;
  private static final int __ATTR6_ISSET_ID = 5;
  private static final int __ATTR7_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTR1, new org.apache.thrift.meta_data.FieldMetaData("attr1", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ATTR2, new org.apache.thrift.meta_data.FieldMetaData("attr2", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ATTR3, new org.apache.thrift.meta_data.FieldMetaData("attr3", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ATTR4, new org.apache.thrift.meta_data.FieldMetaData("attr4", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ATTR5, new org.apache.thrift.meta_data.FieldMetaData("attr5", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATTR6, new org.apache.thrift.meta_data.FieldMetaData("attr6", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATTR7, new org.apache.thrift.meta_data.FieldMetaData("attr7", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ATTR8, new org.apache.thrift.meta_data.FieldMetaData("attr8", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR9, new org.apache.thrift.meta_data.FieldMetaData("attr9", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTR10, new org.apache.thrift.meta_data.FieldMetaData("attr10", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ATTR11, new org.apache.thrift.meta_data.FieldMetaData("attr11", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ATTR12, new org.apache.thrift.meta_data.FieldMetaData("attr12", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ThriftComplexTestClass")));
    tmpMap.put(_Fields.ATTR13, new org.apache.thrift.meta_data.FieldMetaData("attr13", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftComplexTestClass"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftComplexTestClass.class, metaDataMap);
  }

  public ThriftComplexTestClass() {
  }

  public ThriftComplexTestClass(
    byte attr1,
    short attr2,
    int attr3,
    long attr4,
    double attr5,
    double attr6,
    boolean attr7,
    String attr8,
    String attr9,
    java.util.List<Double> attr10,
    java.util.List<String> attr11,
    ThriftComplexTestClass attr12,
    java.util.List<ThriftComplexTestClass> attr13)
  {
    this();
    this.attr1 = attr1;
    setAttr1IsSet(true);
    this.attr2 = attr2;
    setAttr2IsSet(true);
    this.attr3 = attr3;
    setAttr3IsSet(true);
    this.attr4 = attr4;
    setAttr4IsSet(true);
    this.attr5 = attr5;
    setAttr5IsSet(true);
    this.attr6 = attr6;
    setAttr6IsSet(true);
    this.attr7 = attr7;
    setAttr7IsSet(true);
    this.attr8 = attr8;
    this.attr9 = attr9;
    this.attr10 = attr10;
    this.attr11 = attr11;
    this.attr12 = attr12;
    this.attr13 = attr13;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftComplexTestClass(ThriftComplexTestClass other) {
    __isset_bitfield = other.__isset_bitfield;
    this.attr1 = other.attr1;
    this.attr2 = other.attr2;
    this.attr3 = other.attr3;
    this.attr4 = other.attr4;
    this.attr5 = other.attr5;
    this.attr6 = other.attr6;
    this.attr7 = other.attr7;
    if (other.isSetAttr8()) {
      this.attr8 = other.attr8;
    }
    if (other.isSetAttr9()) {
      this.attr9 = other.attr9;
    }
    if (other.isSetAttr10()) {
      java.util.List<Double> __this__attr10 = new java.util.ArrayList<Double>(other.attr10);
      this.attr10 = __this__attr10;
    }
    if (other.isSetAttr11()) {
      java.util.List<String> __this__attr11 = new java.util.ArrayList<String>(other.attr11);
      this.attr11 = __this__attr11;
    }
    if (other.isSetAttr12()) {
      this.attr12 = new ThriftComplexTestClass(other.attr12);
    }
    if (other.isSetAttr13()) {
      java.util.List<ThriftComplexTestClass> __this__attr13 = new java.util.ArrayList<ThriftComplexTestClass>(other.attr13.size());
      for (ThriftComplexTestClass other_element : other.attr13) {
        __this__attr13.add(new ThriftComplexTestClass(other_element));
      }
      this.attr13 = __this__attr13;
    }
  }

  public ThriftComplexTestClass deepCopy() {
    return new ThriftComplexTestClass(this);
  }

  @Override
  public void clear() {
    setAttr1IsSet(false);
    this.attr1 = 0;
    setAttr2IsSet(false);
    this.attr2 = 0;
    setAttr3IsSet(false);
    this.attr3 = 0;
    setAttr4IsSet(false);
    this.attr4 = 0;
    setAttr5IsSet(false);
    this.attr5 = 0.0;
    setAttr6IsSet(false);
    this.attr6 = 0.0;
    setAttr7IsSet(false);
    this.attr7 = false;
    this.attr8 = null;
    this.attr9 = null;
    this.attr10 = null;
    this.attr11 = null;
    this.attr12 = null;
    this.attr13 = null;
  }

  public byte getAttr1() {
    return this.attr1;
  }

  public ThriftComplexTestClass setAttr1(byte attr1) {
    this.attr1 = attr1;
    setAttr1IsSet(true);
    return this;
  }

  public void unsetAttr1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR1_ISSET_ID);
  }

  /** Returns true if field attr1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR1_ISSET_ID);
  }

  public void setAttr1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR1_ISSET_ID, value);
  }

  public short getAttr2() {
    return this.attr2;
  }

  public ThriftComplexTestClass setAttr2(short attr2) {
    this.attr2 = attr2;
    setAttr2IsSet(true);
    return this;
  }

  public void unsetAttr2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR2_ISSET_ID);
  }

  /** Returns true if field attr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR2_ISSET_ID);
  }

  public void setAttr2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR2_ISSET_ID, value);
  }

  public int getAttr3() {
    return this.attr3;
  }

  public ThriftComplexTestClass setAttr3(int attr3) {
    this.attr3 = attr3;
    setAttr3IsSet(true);
    return this;
  }

  public void unsetAttr3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR3_ISSET_ID);
  }

  /** Returns true if field attr3 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR3_ISSET_ID);
  }

  public void setAttr3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR3_ISSET_ID, value);
  }

  public long getAttr4() {
    return this.attr4;
  }

  public ThriftComplexTestClass setAttr4(long attr4) {
    this.attr4 = attr4;
    setAttr4IsSet(true);
    return this;
  }

  public void unsetAttr4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR4_ISSET_ID);
  }

  /** Returns true if field attr4 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR4_ISSET_ID);
  }

  public void setAttr4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR4_ISSET_ID, value);
  }

  public double getAttr5() {
    return this.attr5;
  }

  public ThriftComplexTestClass setAttr5(double attr5) {
    this.attr5 = attr5;
    setAttr5IsSet(true);
    return this;
  }

  public void unsetAttr5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR5_ISSET_ID);
  }

  /** Returns true if field attr5 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR5_ISSET_ID);
  }

  public void setAttr5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR5_ISSET_ID, value);
  }

  public double getAttr6() {
    return this.attr6;
  }

  public ThriftComplexTestClass setAttr6(double attr6) {
    this.attr6 = attr6;
    setAttr6IsSet(true);
    return this;
  }

  public void unsetAttr6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR6_ISSET_ID);
  }

  /** Returns true if field attr6 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR6_ISSET_ID);
  }

  public void setAttr6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR6_ISSET_ID, value);
  }

  public boolean isAttr7() {
    return this.attr7;
  }

  public ThriftComplexTestClass setAttr7(boolean attr7) {
    this.attr7 = attr7;
    setAttr7IsSet(true);
    return this;
  }

  public void unsetAttr7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ATTR7_ISSET_ID);
  }

  /** Returns true if field attr7 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ATTR7_ISSET_ID);
  }

  public void setAttr7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ATTR7_ISSET_ID, value);
  }

  public String getAttr8() {
    return this.attr8;
  }

  public ThriftComplexTestClass setAttr8(String attr8) {
    this.attr8 = attr8;
    return this;
  }

  public void unsetAttr8() {
    this.attr8 = null;
  }

  /** Returns true if field attr8 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr8() {
    return this.attr8 != null;
  }

  public void setAttr8IsSet(boolean value) {
    if (!value) {
      this.attr8 = null;
    }
  }

  public String getAttr9() {
    return this.attr9;
  }

  public ThriftComplexTestClass setAttr9(String attr9) {
    this.attr9 = attr9;
    return this;
  }

  public void unsetAttr9() {
    this.attr9 = null;
  }

  /** Returns true if field attr9 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr9() {
    return this.attr9 != null;
  }

  public void setAttr9IsSet(boolean value) {
    if (!value) {
      this.attr9 = null;
    }
  }

  public int getAttr10Size() {
    return (this.attr10 == null) ? 0 : this.attr10.size();
  }

  public java.util.Iterator<Double> getAttr10Iterator() {
    return (this.attr10 == null) ? null : this.attr10.iterator();
  }

  public void addToAttr10(double elem) {
    if (this.attr10 == null) {
      this.attr10 = new java.util.ArrayList<Double>();
    }
    this.attr10.add(elem);
  }

  public java.util.List<Double> getAttr10() {
    return this.attr10;
  }

  public ThriftComplexTestClass setAttr10(java.util.List<Double> attr10) {
    this.attr10 = attr10;
    return this;
  }

  public void unsetAttr10() {
    this.attr10 = null;
  }

  /** Returns true if field attr10 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr10() {
    return this.attr10 != null;
  }

  public void setAttr10IsSet(boolean value) {
    if (!value) {
      this.attr10 = null;
    }
  }

  public int getAttr11Size() {
    return (this.attr11 == null) ? 0 : this.attr11.size();
  }

  public java.util.Iterator<String> getAttr11Iterator() {
    return (this.attr11 == null) ? null : this.attr11.iterator();
  }

  public void addToAttr11(String elem) {
    if (this.attr11 == null) {
      this.attr11 = new java.util.ArrayList<String>();
    }
    this.attr11.add(elem);
  }

  public java.util.List<String> getAttr11() {
    return this.attr11;
  }

  public ThriftComplexTestClass setAttr11(java.util.List<String> attr11) {
    this.attr11 = attr11;
    return this;
  }

  public void unsetAttr11() {
    this.attr11 = null;
  }

  /** Returns true if field attr11 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr11() {
    return this.attr11 != null;
  }

  public void setAttr11IsSet(boolean value) {
    if (!value) {
      this.attr11 = null;
    }
  }

  public ThriftComplexTestClass getAttr12() {
    return this.attr12;
  }

  public ThriftComplexTestClass setAttr12(ThriftComplexTestClass attr12) {
    this.attr12 = attr12;
    return this;
  }

  public void unsetAttr12() {
    this.attr12 = null;
  }

  /** Returns true if field attr12 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr12() {
    return this.attr12 != null;
  }

  public void setAttr12IsSet(boolean value) {
    if (!value) {
      this.attr12 = null;
    }
  }

  public int getAttr13Size() {
    return (this.attr13 == null) ? 0 : this.attr13.size();
  }

  public java.util.Iterator<ThriftComplexTestClass> getAttr13Iterator() {
    return (this.attr13 == null) ? null : this.attr13.iterator();
  }

  public void addToAttr13(ThriftComplexTestClass elem) {
    if (this.attr13 == null) {
      this.attr13 = new java.util.ArrayList<ThriftComplexTestClass>();
    }
    this.attr13.add(elem);
  }

  public java.util.List<ThriftComplexTestClass> getAttr13() {
    return this.attr13;
  }

  public ThriftComplexTestClass setAttr13(java.util.List<ThriftComplexTestClass> attr13) {
    this.attr13 = attr13;
    return this;
  }

  public void unsetAttr13() {
    this.attr13 = null;
  }

  /** Returns true if field attr13 is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr13() {
    return this.attr13 != null;
  }

  public void setAttr13IsSet(boolean value) {
    if (!value) {
      this.attr13 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTR1:
      if (value == null) {
        unsetAttr1();
      } else {
        setAttr1((Byte)value);
      }
      break;

    case ATTR2:
      if (value == null) {
        unsetAttr2();
      } else {
        setAttr2((Short)value);
      }
      break;

    case ATTR3:
      if (value == null) {
        unsetAttr3();
      } else {
        setAttr3((Integer)value);
      }
      break;

    case ATTR4:
      if (value == null) {
        unsetAttr4();
      } else {
        setAttr4((Long)value);
      }
      break;

    case ATTR5:
      if (value == null) {
        unsetAttr5();
      } else {
        setAttr5((Double)value);
      }
      break;

    case ATTR6:
      if (value == null) {
        unsetAttr6();
      } else {
        setAttr6((Double)value);
      }
      break;

    case ATTR7:
      if (value == null) {
        unsetAttr7();
      } else {
        setAttr7((Boolean)value);
      }
      break;

    case ATTR8:
      if (value == null) {
        unsetAttr8();
      } else {
        setAttr8((String)value);
      }
      break;

    case ATTR9:
      if (value == null) {
        unsetAttr9();
      } else {
        setAttr9((String)value);
      }
      break;

    case ATTR10:
      if (value == null) {
        unsetAttr10();
      } else {
        setAttr10((java.util.List<Double>)value);
      }
      break;

    case ATTR11:
      if (value == null) {
        unsetAttr11();
      } else {
        setAttr11((java.util.List<String>)value);
      }
      break;

    case ATTR12:
      if (value == null) {
        unsetAttr12();
      } else {
        setAttr12((ThriftComplexTestClass)value);
      }
      break;

    case ATTR13:
      if (value == null) {
        unsetAttr13();
      } else {
        setAttr13((java.util.List<ThriftComplexTestClass>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTR1:
      return getAttr1();

    case ATTR2:
      return getAttr2();

    case ATTR3:
      return getAttr3();

    case ATTR4:
      return getAttr4();

    case ATTR5:
      return getAttr5();

    case ATTR6:
      return getAttr6();

    case ATTR7:
      return isAttr7();

    case ATTR8:
      return getAttr8();

    case ATTR9:
      return getAttr9();

    case ATTR10:
      return getAttr10();

    case ATTR11:
      return getAttr11();

    case ATTR12:
      return getAttr12();

    case ATTR13:
      return getAttr13();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTR1:
      return isSetAttr1();
    case ATTR2:
      return isSetAttr2();
    case ATTR3:
      return isSetAttr3();
    case ATTR4:
      return isSetAttr4();
    case ATTR5:
      return isSetAttr5();
    case ATTR6:
      return isSetAttr6();
    case ATTR7:
      return isSetAttr7();
    case ATTR8:
      return isSetAttr8();
    case ATTR9:
      return isSetAttr9();
    case ATTR10:
      return isSetAttr10();
    case ATTR11:
      return isSetAttr11();
    case ATTR12:
      return isSetAttr12();
    case ATTR13:
      return isSetAttr13();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftComplexTestClass)
      return this.equals((ThriftComplexTestClass)that);
    return false;
  }

  public boolean equals(ThriftComplexTestClass that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_attr1 = true;
    boolean that_present_attr1 = true;
    if (this_present_attr1 || that_present_attr1) {
      if (!(this_present_attr1 && that_present_attr1))
        return false;
      if (this.attr1 != that.attr1)
        return false;
    }

    boolean this_present_attr2 = true;
    boolean that_present_attr2 = true;
    if (this_present_attr2 || that_present_attr2) {
      if (!(this_present_attr2 && that_present_attr2))
        return false;
      if (this.attr2 != that.attr2)
        return false;
    }

    boolean this_present_attr3 = true;
    boolean that_present_attr3 = true;
    if (this_present_attr3 || that_present_attr3) {
      if (!(this_present_attr3 && that_present_attr3))
        return false;
      if (this.attr3 != that.attr3)
        return false;
    }

    boolean this_present_attr4 = true;
    boolean that_present_attr4 = true;
    if (this_present_attr4 || that_present_attr4) {
      if (!(this_present_attr4 && that_present_attr4))
        return false;
      if (this.attr4 != that.attr4)
        return false;
    }

    boolean this_present_attr5 = true;
    boolean that_present_attr5 = true;
    if (this_present_attr5 || that_present_attr5) {
      if (!(this_present_attr5 && that_present_attr5))
        return false;
      if (this.attr5 != that.attr5)
        return false;
    }

    boolean this_present_attr6 = true;
    boolean that_present_attr6 = true;
    if (this_present_attr6 || that_present_attr6) {
      if (!(this_present_attr6 && that_present_attr6))
        return false;
      if (this.attr6 != that.attr6)
        return false;
    }

    boolean this_present_attr7 = true;
    boolean that_present_attr7 = true;
    if (this_present_attr7 || that_present_attr7) {
      if (!(this_present_attr7 && that_present_attr7))
        return false;
      if (this.attr7 != that.attr7)
        return false;
    }

    boolean this_present_attr8 = true && this.isSetAttr8();
    boolean that_present_attr8 = true && that.isSetAttr8();
    if (this_present_attr8 || that_present_attr8) {
      if (!(this_present_attr8 && that_present_attr8))
        return false;
      if (!this.attr8.equals(that.attr8))
        return false;
    }

    boolean this_present_attr9 = true && this.isSetAttr9();
    boolean that_present_attr9 = true && that.isSetAttr9();
    if (this_present_attr9 || that_present_attr9) {
      if (!(this_present_attr9 && that_present_attr9))
        return false;
      if (!this.attr9.equals(that.attr9))
        return false;
    }

    boolean this_present_attr10 = true && this.isSetAttr10();
    boolean that_present_attr10 = true && that.isSetAttr10();
    if (this_present_attr10 || that_present_attr10) {
      if (!(this_present_attr10 && that_present_attr10))
        return false;
      if (!this.attr10.equals(that.attr10))
        return false;
    }

    boolean this_present_attr11 = true && this.isSetAttr11();
    boolean that_present_attr11 = true && that.isSetAttr11();
    if (this_present_attr11 || that_present_attr11) {
      if (!(this_present_attr11 && that_present_attr11))
        return false;
      if (!this.attr11.equals(that.attr11))
        return false;
    }

    boolean this_present_attr12 = true && this.isSetAttr12();
    boolean that_present_attr12 = true && that.isSetAttr12();
    if (this_present_attr12 || that_present_attr12) {
      if (!(this_present_attr12 && that_present_attr12))
        return false;
      if (!this.attr12.equals(that.attr12))
        return false;
    }

    boolean this_present_attr13 = true && this.isSetAttr13();
    boolean that_present_attr13 = true && that.isSetAttr13();
    if (this_present_attr13 || that_present_attr13) {
      if (!(this_present_attr13 && that_present_attr13))
        return false;
      if (!this.attr13.equals(that.attr13))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (attr1);

    hashCode = hashCode * 8191 + attr2;

    hashCode = hashCode * 8191 + attr3;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(attr4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(attr5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(attr6);

    hashCode = hashCode * 8191 + ((attr7) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAttr8()) ? 131071 : 524287);
    if (isSetAttr8())
      hashCode = hashCode * 8191 + attr8.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr9()) ? 131071 : 524287);
    if (isSetAttr9())
      hashCode = hashCode * 8191 + attr9.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr10()) ? 131071 : 524287);
    if (isSetAttr10())
      hashCode = hashCode * 8191 + attr10.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr11()) ? 131071 : 524287);
    if (isSetAttr11())
      hashCode = hashCode * 8191 + attr11.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr12()) ? 131071 : 524287);
    if (isSetAttr12())
      hashCode = hashCode * 8191 + attr12.hashCode();

    hashCode = hashCode * 8191 + ((isSetAttr13()) ? 131071 : 524287);
    if (isSetAttr13())
      hashCode = hashCode * 8191 + attr13.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftComplexTestClass other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttr1()).compareTo(other.isSetAttr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr1, other.attr1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr2()).compareTo(other.isSetAttr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr2, other.attr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr3()).compareTo(other.isSetAttr3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr3, other.attr3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr4()).compareTo(other.isSetAttr4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr4, other.attr4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr5()).compareTo(other.isSetAttr5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr5, other.attr5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr6()).compareTo(other.isSetAttr6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr6, other.attr6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr7()).compareTo(other.isSetAttr7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr7, other.attr7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr8()).compareTo(other.isSetAttr8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr8, other.attr8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr9()).compareTo(other.isSetAttr9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr9, other.attr9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr10()).compareTo(other.isSetAttr10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr10, other.attr10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr11()).compareTo(other.isSetAttr11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr11, other.attr11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr12()).compareTo(other.isSetAttr12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr12, other.attr12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr13()).compareTo(other.isSetAttr13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr13, other.attr13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftComplexTestClass(");
    boolean first = true;

    sb.append("attr1:");
    sb.append(this.attr1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr2:");
    sb.append(this.attr2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr3:");
    sb.append(this.attr3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr4:");
    sb.append(this.attr4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr5:");
    sb.append(this.attr5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr6:");
    sb.append(this.attr6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr7:");
    sb.append(this.attr7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr8:");
    if (this.attr8 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr8);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr9:");
    if (this.attr9 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr9);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr10:");
    if (this.attr10 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr10);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr11:");
    if (this.attr11 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr11);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr12:");
    if (this.attr12 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr12);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attr13:");
    if (this.attr13 == null) {
      sb.append("null");
    } else {
      sb.append(this.attr13);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftComplexTestClassStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftComplexTestClassStandardScheme getScheme() {
      return new ThriftComplexTestClassStandardScheme();
    }
  }

  private static class ThriftComplexTestClassStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftComplexTestClass> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftComplexTestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTR1
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.attr1 = iprot.readByte();
              struct.setAttr1IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTR2
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.attr2 = iprot.readI16();
              struct.setAttr2IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTR3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attr3 = iprot.readI32();
              struct.setAttr3IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTR4
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.attr4 = iprot.readI64();
              struct.setAttr4IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTR5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.attr5 = iprot.readDouble();
              struct.setAttr5IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ATTR6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.attr6 = iprot.readDouble();
              struct.setAttr6IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ATTR7
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.attr7 = iprot.readBool();
              struct.setAttr7IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTR8
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr8 = iprot.readString();
              struct.setAttr8IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ATTR9
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attr9 = iprot.readString();
              struct.setAttr9IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ATTR10
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.attr10 = new java.util.ArrayList<Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.attr10.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAttr10IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ATTR11
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.attr11 = new java.util.ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.attr11.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setAttr11IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ATTR12
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.attr12 = new ThriftComplexTestClass();
              struct.attr12.read(iprot);
              struct.setAttr12IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ATTR13
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.attr13 = new java.util.ArrayList<ThriftComplexTestClass>(_list6.size);
                ThriftComplexTestClass _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new ThriftComplexTestClass();
                  _elem7.read(iprot);
                  struct.attr13.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setAttr13IsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftComplexTestClass struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ATTR1_FIELD_DESC);
      oprot.writeByte(struct.attr1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR2_FIELD_DESC);
      oprot.writeI16(struct.attr2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR3_FIELD_DESC);
      oprot.writeI32(struct.attr3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR4_FIELD_DESC);
      oprot.writeI64(struct.attr4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR5_FIELD_DESC);
      oprot.writeDouble(struct.attr5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR6_FIELD_DESC);
      oprot.writeDouble(struct.attr6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR7_FIELD_DESC);
      oprot.writeBool(struct.attr7);
      oprot.writeFieldEnd();
      if (struct.attr8 != null) {
        oprot.writeFieldBegin(ATTR8_FIELD_DESC);
        oprot.writeString(struct.attr8);
        oprot.writeFieldEnd();
      }
      if (struct.attr9 != null) {
        oprot.writeFieldBegin(ATTR9_FIELD_DESC);
        oprot.writeString(struct.attr9);
        oprot.writeFieldEnd();
      }
      if (struct.attr10 != null) {
        oprot.writeFieldBegin(ATTR10_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.attr10.size()));
          for (double _iter9 : struct.attr10)
          {
            oprot.writeDouble(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attr11 != null) {
        oprot.writeFieldBegin(ATTR11_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.attr11.size()));
          for (String _iter10 : struct.attr11)
          {
            oprot.writeString(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.attr12 != null) {
        oprot.writeFieldBegin(ATTR12_FIELD_DESC);
        struct.attr12.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.attr13 != null) {
        oprot.writeFieldBegin(ATTR13_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attr13.size()));
          for (ThriftComplexTestClass _iter11 : struct.attr13)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftComplexTestClassTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftComplexTestClassTupleScheme getScheme() {
      return new ThriftComplexTestClassTupleScheme();
    }
  }

  private static class ThriftComplexTestClassTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftComplexTestClass> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftComplexTestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAttr1()) {
        optionals.set(0);
      }
      if (struct.isSetAttr2()) {
        optionals.set(1);
      }
      if (struct.isSetAttr3()) {
        optionals.set(2);
      }
      if (struct.isSetAttr4()) {
        optionals.set(3);
      }
      if (struct.isSetAttr5()) {
        optionals.set(4);
      }
      if (struct.isSetAttr6()) {
        optionals.set(5);
      }
      if (struct.isSetAttr7()) {
        optionals.set(6);
      }
      if (struct.isSetAttr8()) {
        optionals.set(7);
      }
      if (struct.isSetAttr9()) {
        optionals.set(8);
      }
      if (struct.isSetAttr10()) {
        optionals.set(9);
      }
      if (struct.isSetAttr11()) {
        optionals.set(10);
      }
      if (struct.isSetAttr12()) {
        optionals.set(11);
      }
      if (struct.isSetAttr13()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetAttr1()) {
        oprot.writeByte(struct.attr1);
      }
      if (struct.isSetAttr2()) {
        oprot.writeI16(struct.attr2);
      }
      if (struct.isSetAttr3()) {
        oprot.writeI32(struct.attr3);
      }
      if (struct.isSetAttr4()) {
        oprot.writeI64(struct.attr4);
      }
      if (struct.isSetAttr5()) {
        oprot.writeDouble(struct.attr5);
      }
      if (struct.isSetAttr6()) {
        oprot.writeDouble(struct.attr6);
      }
      if (struct.isSetAttr7()) {
        oprot.writeBool(struct.attr7);
      }
      if (struct.isSetAttr8()) {
        oprot.writeString(struct.attr8);
      }
      if (struct.isSetAttr9()) {
        oprot.writeString(struct.attr9);
      }
      if (struct.isSetAttr10()) {
        {
          oprot.writeI32(struct.attr10.size());
          for (double _iter12 : struct.attr10)
          {
            oprot.writeDouble(_iter12);
          }
        }
      }
      if (struct.isSetAttr11()) {
        {
          oprot.writeI32(struct.attr11.size());
          for (String _iter13 : struct.attr11)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetAttr12()) {
        struct.attr12.write(oprot);
      }
      if (struct.isSetAttr13()) {
        {
          oprot.writeI32(struct.attr13.size());
          for (ThriftComplexTestClass _iter14 : struct.attr13)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftComplexTestClass struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.attr1 = iprot.readByte();
        struct.setAttr1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.attr2 = iprot.readI16();
        struct.setAttr2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.attr3 = iprot.readI32();
        struct.setAttr3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.attr4 = iprot.readI64();
        struct.setAttr4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.attr5 = iprot.readDouble();
        struct.setAttr5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.attr6 = iprot.readDouble();
        struct.setAttr6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.attr7 = iprot.readBool();
        struct.setAttr7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.attr8 = iprot.readString();
        struct.setAttr8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.attr9 = iprot.readString();
        struct.setAttr9IsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.attr10 = new java.util.ArrayList<Double>(_list15.size);
          double _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readDouble();
            struct.attr10.add(_elem16);
          }
        }
        struct.setAttr10IsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attr11 = new java.util.ArrayList<String>(_list18.size);
          String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.attr11.add(_elem19);
          }
        }
        struct.setAttr11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.attr12 = new ThriftComplexTestClass();
        struct.attr12.read(iprot);
        struct.setAttr12IsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attr13 = new java.util.ArrayList<ThriftComplexTestClass>(_list21.size);
          ThriftComplexTestClass _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ThriftComplexTestClass();
            _elem22.read(iprot);
            struct.attr13.add(_elem22);
          }
        }
        struct.setAttr13IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

